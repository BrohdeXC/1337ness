#!/bin/bash

# Variables, Paths, Version
repeat=1
VN="0.4.9"  # Version Number
leetpath="$(dirname "$(readlink -f "$0")")"  # Path of LeetFolder
userpath="$(pwd)" # Path of working directory

# Default Settings
leetdiff="Easy" # Default leetspeak difficult
progbar="off" # This will be able to toggle later

# ASCII art for the cool kids
function asciilogo {
echo '
 ____________ ________________________  ___________ _________ _________
/_   \_____  \\_____  \______  \      \ \_   _____//   _____//   _____/
 |   | _(__  <  _(__  <   /    /   |   \ |    __)_ \_____  \ \_____  \ 
 |   |/       \/       \ /    /    |    \|        \/        \/        \
 |___/______  /______  //____/\____|__  /_______  /_______  /_______  /
            \/       \/               \/        \/        \/        \/ 
Version '$VN'	    An All-In-One Wordlist Generator       By: BrohdeXC
-----------------------------------------------------------------------'
}

# Tool Selection for the nerds
function asciimain {
echo '    1) Leet a Word
    2) Leet a List
    3) Leet w/ CeWL (By Robin Wood AKA Digininja)
    4) Append Wordlists
    5) Permutate Wordlists
    6) Subtract Wordlists
    7) Options
    8) Exit
-----------------------------------------------------------------------'
    read -p 'Please make a selection: ' choice
}

# Leetspeak Difficulty Selection
function asciidiff {
    echo "    1) UL Case - Upper and lowercase substitutions (Fastest)
    2) Easy   - Common single letter substitutions (Default)
    3) Medium - Uncommon single letter substitutions
    4) Hard   - All possible leetspeak substitutions (Slow, Long List)
    5) Return

                Currently Selected: "$leetdiff"
-----------------------------------------------------------------------"
    read -p "Which leetspeak list would you like to use? (1-5) " diffchoice
}

# Main Function 
function main {
    while [[ $repeat -eq 1 ]]; do
        clear
	asciilogo
	asciimain
        # User selection of which program to run
        if (($choice == 1)); then
	    clear
	    asciilogo
            wordleet
            repeat
        elif (($choice == 2)); then
	    clear
	    asciilogo
            listleet
            repeat
        elif (($choice == 3)); then
	    clear
	    asciilogo
            cewlleet
            repeat
	elif (($choice == 4)); then
	    clear
	    asciilogo
            append
            repeat
        elif (($choice == 5)); then
	    clear
	    asciilogo
            permutate
            repeat
	elif (($choice == 6)); then
	    clear
	    asciilogo
	    subtract
	    repeat
        elif (($choice == 7)); then
	    diff
	elif (($choice == 8)); then
	    echo Thanks for using 1337ness!
	    sleep .75
	    clear
            repeat=0
        else
            echo "Invalid Response, Please make a selection (1-8): "
        fi
    done
}

# LeetSpeak Difficulty
function diff {
    diffchoice=0
    while [[ $diffchoice != 5 ]]; do
        clear
        asciilogo
        asciidiff
        if (($diffchoice == 1)); then
            leetdiff="UpperLower"
        elif (($diffchoice == 2)); then
            leetdiff="Easy"
        elif (($diffchoice == 3)); then
            leetdiff="Medium"
	elif (($diffchoice == 4)); then
	    leetdiff="Hard"
        elif (($diffchoice == 5)); then
            return
        else
            echo "Invalid Response, Please make a selection (1-5): "
        fi
    done
}

# Repeat Function
function repeat {
    read -p "Would you like to continue? (y/n): " cont
    if [[ $cont == "y" || $cont == "Y" ]]; then
        echo "Continuing..."
	sleep .75
        return 0
    elif [[ $cont == "n" || $cont == "N" ]]; then
        echo "Thanks for using 1337ness!"
	sleep 0.75
	clear
        repeat=0
        return 1
    else
        echo "Invalid Response, Would you like to continue? (y/n): "
        return 0
    fi
}

# Check if file exists and corrects if file not there
function existin {
    rep=0
    while [[ $rep == 0 ]]; do
        if [ -e $userpath/$input ]; then
            rep=1
            continue
        else
            read -p "This file cannot be found, input a valid filename: " input
        fi
    done
}


# Protect already existing files function
function existout {
    rep=0
    while [[ $rep == 0 ]]; do
        if [ -e $userpath/$out ]; then
            read -p "Are you sure you want to override the file \"$out\"? (y/n) " override
            if [ $override == "y" ]; then
		rm $userpath/$out
                rep=1
                continue
            elif [ $override == "n" ]; then
                read -p "What is the name of the output file? " out
                continue
            else
                read -p "Invalid response: Are you sure you want to override the file \'$out\'? (y/n) " override
                continue
            fi
        else
            rep=1
            continue
        fi
    done
}

# Progress Bar Function - input, out
function progBar {
        linecount=$(wc -l $input | cut -d ' ' -f 1)
        count=0
        while read -r line
                do
                ((count++))
                echo -ne "Processing line $count of $linecount\r"
                python3 $leetpath/LeetSpeak.py "$line" $leetdiff $progbar >> $out
                local columns=$(tput cols)
                local progress=$((count * 100 / linecount))
                local bar_length=$((columns-41))
                local filled_length=$(((progress * bar_length)/100))
                local empty_length=$((bar_length - filled_length))

                # Print the progress bar
                printf "\r %3d%% [%-${filled_length}s%-${empty_length}s] " $progress \
                        $(printf "%0.s#" $(seq 1 $filled_length)) \
                        $(printf "%0.s " $(seq 1 $empty_length))

                done < $input
                echo
                echo "Wordlist saved as \"$out\" ($(ls -lh $out | cut -d ' ' -f 5))"
}

# WordLeet Function
function wordleet {
	read -p "What is the word you would like to 1337? " word
	read -p "What is the name of the output file? " out
	existout
	python3 $leetpath/LeetSpeak.py "$word" $leetdiff $progbar > $out
	echo "Wordlist saved as \"$out\" ($(ls -lh $out | cut -d ' ' -f 5))"
}

# ListLeet Function
function listleet {
	read -p "What is the path of the input file? " input
	existin
	read -p "What is the name of the output file? " out
	existout
	progBar
}

# CewlLeet Function
function cewlleet {
	# Gather information to be used
	read -p "What is the URL you would like to scrape? " url
	read -p "What is the minimum word length to look for? " min
	read -p "How many of the most common words should be used? " count
	read -p "What do you want to name the output file? " out
	existout

	# Run Cewl and output it to a file
	cewl -m $min -d 0 -w $out --lowercase $url 

	# Take the [user defined #] most common words and put them in a temporary file
	cat $out | head -n $count > temp.txt
	rm $out

	# Take the [user defined #] most common words and put them into a list 
	echo -------------------------------------------------------------------------
	echo The top $count words on this website are:
	cat temp.txt
	echo -------------------------------------------------------------------------
	input=temp.txt

	# Create output file put the leetspeak variations into it
	touch $out
	progBar

	# Clean up
	rm temp.txt
}

# Append List Function
function append {
        # Get user Inputs
        read -p "What is the name of the first list? " input
	existin
	lst1=$input
        read -p "What is the name of the second list? " input
	existin
	lst2=$input
        read -p "What is the name of the output file? " out
	existout

        # Combine the lists into one output file
        cat $lst1 $lst2 > $out
        echo "Lists appended to \"$out\"! ($(ls -lh $out | cut -d ' ' -f 5))"
}
 
# Permutate List Function
function permutate {
	read -p "What is the name of the first list? " input
	existin
	lst1=$input
        read -p "What is the name of the second list? " input
	existin
	lst2=$input
	read -p "What character will separate the lists? (Press Enter if none): " separator
        read -p "What is the name of the output file? " out
	existout
        touch "$out"

    # Generate permutations
    while read line1
        do
        while read line2
            do
            echo $line1$separator$line2 >> "$out"
        done < "$lst2"
    done < "$lst1"

    echo "Permutations saved to \"$out\"! ($(ls -lh $out | cut -d ' ' -f 5))"
}

# Subtract List Function
function subtract {
        read -p "What is the name of the first list? " input
        existin
        lst1=$input
        read -p "What is the name of the second list? " input
        existin
        lst2=$input
        read -p "What is the name of the output file? " out

        # Subtract the lists
        grep -Fxv -f "$lst1" "$lst2" > "$out"
        grep -Fxv -f "$lst2" "$lst1" >> "$out"

        echo "Leftover words saved to \"$out\"! ($(ls -lh $out | cut -d ' ' -f 5))"
}

main
